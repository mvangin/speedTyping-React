{"version":3,"sources":["hooks/GameLogic.js","TypeCorrect.js","App.js","index.js"],"names":["GameLogic","useState","userText","setUserText","timer","setTimer","initialize","setInitialize","textDisable","setTextDisable","newGameDisable","setNewGameDisable","timerInputDisable","setTimerInputDisable","inputTimer","setInputTimer","textArea","useRef","wpm","setWpm","percentCorrect","setPercentCorrect","endGame","setEndGame","randomText","calculateWpm","correctNumTally","userTextArray","split","forEach","item","index","length","Math","round","accuracy","useEffect","timerSet","setTimeout","prevTime","clearTimeout","handleInput","e","target","value","handleTimerSubmit","current","focus","alert","StartNewGame","handleInputTimer","TypeCorrect","props","mappedText","map","key","Date","random","id","handleID","App","ref","disabled","onChange","placeholder","type","min","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6074a814.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nfunction GameLogic() {\n    const [userText, setUserText] = useState(\"\")\n    const [timer, setTimer] = useState(10)\n    const [initialize, setInitialize] = useState(false)\n    const [textDisable, setTextDisable] = useState(false)\n    const [newGameDisable, setNewGameDisable] = useState(false)\n    const [timerInputDisable, setTimerInputDisable] = useState(false)\n    const [inputTimer, setInputTimer] = useState(10)\n    const textArea = useRef(null)\n    const [wpm, setWpm] = useState(\"\")\n    const [percentCorrect, setPercentCorrect] = useState(\"\")\n    const [endGame, setEndGame] = useState(false)\n\n    let defaultText =\n        \"Dave wasn't exactly sure how he had ended up in this predicament. He ran through all the events that had lead to this current situation and it still didn't make sense. He wanted to spend some time to try and make sense of it all, but he had higher priorities at the moment. The first was how to get out of his current situation of being in a tree with snow falling all around and no way for him to get down. \"\n\n    const [randomText, setRandomText] = useState(defaultText)\n\n\n    function calculateWpm() {\n        let correctNumTally = 0;\n\n        let userTextArray = userText.split(\"\")\n\n\n        userTextArray.forEach((item, index) => {\n            if (index < randomText.length) {\n                if (item === randomText[index]) {\n                    correctNumTally += 1;\n                }\n            }\n        })\n\n        let wpm = Math.round((userTextArray.length / 5) / ((inputTimer - timer) / 60))\n        let accuracy = Math.round((correctNumTally) / userTextArray.length * 100)\n\n        return ({ wpm: wpm, accuracy: accuracy })\n\n    }\n\n    function handleInput(e) {\n        if (userText === \"\" && initialize === false) {\n            setInitialize(true);\n            setTimerInputDisable(true)\n            setInputTimer(timer)\n            setWpm(\"\")\n        }\n        setUserText(e.target.value);\n        if ((inputTimer - timer) > 1) {\n            let { wpm } = calculateWpm();\n            setWpm(wpm)\n        }\n    }\n\n\n    function handleTimerSubmit(e) {\n        if (inputTimer > 0) {\n            setTimer(inputTimer)\n            textArea.current.focus()\n        } else {\n            alert(\"please enter valid number\")\n        }\n    }\n\n    function handleInputTimer(e) {\n        setInputTimer(e.target.value)\n    }\n\n    useEffect(() => {\n        let timerSet\n        if (initialize && timer > 0) {\n            timerSet = setTimeout(() => {\n                setTimer(prevTime => prevTime - 1)\n            }, 1000)\n        } else if (timer === 0) {\n            setEndGame(true)\n        }\n\n        return () => clearTimeout(timerSet)\n\n    }, [initialize, timer])\n\n    useEffect(() => {\n        if (endGame) {\n            setDefaultValues();\n\n            function setDefaultValues() {\n                setTextDisable(true)\n                setNewGameDisable(false)\n                setEndGame(false)\n\n\n            }\n\n            let { wpm, accuracy } = calculateWpm();\n            setPercentCorrect(accuracy)\n            setWpm(wpm)\n\n        }\n\n    }, [endGame])\n\n\n    function StartNewGame() {\n        setInitialize(false)\n        setTimerInputDisable(false)\n        setTextDisable(false)\n        setTimer(inputTimer)\n        setUserText(\"\")\n        setPercentCorrect(\"\")\n        setWpm(\"\")\n        textArea.current.focus()\n    }\n\n    return ({\n        handleInput,\n        handleTimerSubmit,\n        StartNewGame,\n        handleInputTimer,\n        randomText,\n        userText,\n        timer,\n        initialize,\n        textDisable,\n        newGameDisable,\n        timerInputDisable,\n        inputTimer,\n        textArea,\n        wpm,\n        percentCorrect,\n        endGame,\n    })\n}\n\nexport default GameLogic","\nimport React, { useState } from \"react\"\n\nfunction TypeCorrect(props) {\n\n    const text = props.randomText.split(\"\")\n    const mappedText = text.map((item, index) => {\n        return (\n            <span key={new Date() * Math.random()} id={handleID(item, index)}>\n                {item}\n            </span >\n\n        )\n    })\n\n    function handleID(item, index) {\n        if (index <= props.userText.length) {\n            if (index === (props.userText.length)) {\n                return \"highlightCurrent\"\n            } else if (item === props.userText[index]) {\n                return \"highlight\"\n            } else {\n                return \"nohighlight\"\n            }\n        }\n    }\n\n    return (\n        <div>\n            {mappedText}\n        </div>)\n}\n\nexport default TypeCorrect","import React from \"react\"\nimport GameLogic from \"./hooks/GameLogic\"\nimport TypeCorrect from \"./TypeCorrect\"\n\n\nfunction App() {\n  const {\n    handleInput,\n    handleTimerSubmit,\n    StartNewGame,\n    handleInputTimer,\n    randomText,\n    userText,\n    timer,\n    textDisable,\n    newGameDisable,\n    timerInputDisable,\n    inputTimer,\n    textArea,\n    wpm,\n    percentCorrect\n  } = GameLogic();\n\n  return (\n    <>\n      <h1>\n        Speed Typing Test\n        </h1>\n\n\n\n      <div id=\"contentWrapper\">\n\n        <div id=\"textWrapper\">\n        <div id=\"randomText\">\n            <TypeCorrect randomText={randomText} userText={userText} />\n          </div>\n          <textarea ref={textArea} disabled={textDisable} value={userText} onChange={handleInput} placeholder=\"Start typing to begin\" />\n\n        </div>\n\n        <div id=\"wpm\">\n\n          <h3 id=\"wpmText\">\n            {`Words Per Minute: ${wpm}`}\n          </h3>\n\n          <h3>\n            {`Accuracy (percent): \\n ${percentCorrect}`}\n          </h3>\n\n        </div>\n\n      </div>\n\n      <div id=\"inputWrapper\">\n        Set Timer (Seconds): <input type=\"number\" min=\"1\" disabled={timerInputDisable} value={inputTimer} onChange={handleInputTimer}/>\n        <button onClick={handleTimerSubmit} disabled={timerInputDisable} > submit </button>\n      </div>\n\n      <h2 id=\"timer\">\n        {`Timer: ${timer} seconds`}\n      </h2>\n\n\n\n\n      <button id=\"StartNewGame\" disabled={newGameDisable} onClick={StartNewGame}> Start New Game </button>\n\n\n\n\n\n    </>\n  )\n}\n\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}